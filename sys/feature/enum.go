// AUTOGENERATED FILE

package feature

type flags struct {
	Debug            bool
	Threaded         bool
	Collide          bool
	Repeat           bool
	MultiProc        bool
	UseTmpDir        bool
	HandleSegv       bool
	Coverage         bool
	ExtraCoverage    bool
	Comparisons      bool
	RawCoverage      bool
	TraceCoverage    bool
	SandboxEmpty     bool
	SandboxNone      bool
	SandboxSetuid    bool
	SandboxNamespace bool
	SandboxAndroid   bool
	Fault            bool
	Leak             bool
	KCSAN            bool
	NetInjection     bool
	NetDevices       bool
	NetReset         bool
	DevlinkPCI       bool
	Cgroups          bool
	CloseFDs         bool
	BinfmtMisc       bool
}

const (
	Debug            ID = 0
	Threaded         ID = 1
	Collide          ID = 2
	Repeat           ID = 3
	MultiProc        ID = 4
	UseTmpDir        ID = 5
	HandleSegv       ID = 6
	Coverage         ID = 7
	ExtraCoverage    ID = 8
	Comparisons      ID = 9
	RawCoverage      ID = 10
	TraceCoverage    ID = 11
	SandboxEmpty     ID = 12
	SandboxNone      ID = 13
	SandboxSetuid    ID = 14
	SandboxNamespace ID = 15
	SandboxAndroid   ID = 16
	Fault            ID = 17
	Leak             ID = 18
	KCSAN            ID = 19
	NetInjection     ID = 20
	NetDevices       ID = 21
	NetReset         ID = 22
	DevlinkPCI       ID = 23
	Cgroups          ID = 24
	CloseFDs         ID = 25
	BinfmtMisc       ID = 26
)

func field(flags *flags, index int) *bool {
	switch index {
	case 0:
		return &flags.Debug
	case 1:
		return &flags.Threaded
	case 2:
		return &flags.Collide
	case 3:
		return &flags.Repeat
	case 4:
		return &flags.MultiProc
	case 5:
		return &flags.UseTmpDir
	case 6:
		return &flags.HandleSegv
	case 7:
		return &flags.Coverage
	case 8:
		return &flags.ExtraCoverage
	case 9:
		return &flags.Comparisons
	case 10:
		return &flags.RawCoverage
	case 11:
		return &flags.TraceCoverage
	case 12:
		return &flags.SandboxEmpty
	case 13:
		return &flags.SandboxNone
	case 14:
		return &flags.SandboxSetuid
	case 15:
		return &flags.SandboxNamespace
	case 16:
		return &flags.SandboxAndroid
	case 17:
		return &flags.Fault
	case 18:
		return &flags.Leak
	case 19:
		return &flags.KCSAN
	case 20:
		return &flags.NetInjection
	case 21:
		return &flags.NetDevices
	case 22:
		return &flags.NetReset
	case 23:
		return &flags.DevlinkPCI
	case 24:
		return &flags.Cgroups
	case 25:
		return &flags.CloseFDs
	case 26:
		return &flags.BinfmtMisc
	default:
		panic("unknown feature")
	}
}
