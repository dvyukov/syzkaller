// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatrpc

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExecRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsExecRequest(buf []byte, offset flatbuffers.UOffsetT) *ExecRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExecRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExecRequest(buf []byte, offset flatbuffers.UOffsetT) *ExecRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExecRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExecRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExecRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ExecRequest) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecRequest) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ExecRequest) ProgData(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ExecRequest) ProgDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExecRequest) MutateProgData(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ExecRequest) Flags() RequestFlag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return RequestFlag(rcv._tab.GetUint64(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ExecRequest) MutateFlags(n RequestFlag) bool {
	return rcv._tab.MutateUint64Slot(8, uint64(n))
}

func (rcv *ExecRequest) ExecEnv() ExecEnv {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ExecEnv(rcv._tab.GetUint64(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ExecRequest) MutateExecEnv(n ExecEnv) bool {
	return rcv._tab.MutateUint64Slot(10, uint64(n))
}

func (rcv *ExecRequest) ExecFlags() ExecFlag {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return ExecFlag(rcv._tab.GetUint64(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ExecRequest) MutateExecFlags(n ExecFlag) bool {
	return rcv._tab.MutateUint64Slot(12, uint64(n))
}

func (rcv *ExecRequest) SandboxArg() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecRequest) MutateSandboxArg(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *ExecRequest) SignalFilter(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ExecRequest) SignalFilterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExecRequest) MutateSignalFilter(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *ExecRequest) SignalFilterCall() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecRequest) MutateSignalFilterCall(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *ExecRequest) Repeat() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecRequest) MutateRepeat(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func ExecRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ExecRequestAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ExecRequestAddProgData(builder *flatbuffers.Builder, progData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(progData), 0)
}
func ExecRequestStartProgDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ExecRequestAddFlags(builder *flatbuffers.Builder, flags RequestFlag) {
	builder.PrependUint64Slot(2, uint64(flags), 0)
}
func ExecRequestAddExecEnv(builder *flatbuffers.Builder, execEnv ExecEnv) {
	builder.PrependUint64Slot(3, uint64(execEnv), 0)
}
func ExecRequestAddExecFlags(builder *flatbuffers.Builder, execFlags ExecFlag) {
	builder.PrependUint64Slot(4, uint64(execFlags), 0)
}
func ExecRequestAddSandboxArg(builder *flatbuffers.Builder, sandboxArg int64) {
	builder.PrependInt64Slot(5, sandboxArg, 0)
}
func ExecRequestAddSignalFilter(builder *flatbuffers.Builder, signalFilter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(signalFilter), 0)
}
func ExecRequestStartSignalFilterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExecRequestAddSignalFilterCall(builder *flatbuffers.Builder, signalFilterCall int32) {
	builder.PrependInt32Slot(7, signalFilterCall, 0)
}
func ExecRequestAddRepeat(builder *flatbuffers.Builder, repeat int32) {
	builder.PrependInt32Slot(8, repeat, 0)
}
func ExecRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
