// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatrpc

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExecutingMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsExecutingMessage(buf []byte, offset flatbuffers.UOffsetT) *ExecutingMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExecutingMessage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExecutingMessage(buf []byte, offset flatbuffers.UOffsetT) *ExecutingMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExecutingMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExecutingMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExecutingMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ExecutingMessage) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecutingMessage) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ExecutingMessage) ProcId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecutingMessage) MutateProcId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ExecutingMessage) Try() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExecutingMessage) MutateTry(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func ExecutingMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ExecutingMessageAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ExecutingMessageAddProcId(builder *flatbuffers.Builder, procId int32) {
	builder.PrependInt32Slot(1, procId, 0)
}
func ExecutingMessageAddTry(builder *flatbuffers.Builder, try int32) {
	builder.PrependInt32Slot(2, try, 0)
}
func ExecutingMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
